# A Makefile for building Google Test and using it in user
# tests.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.
CC = gcc
CXX = g++

# Where to store our generated binaries
BIN_DIR = Bin

BINARY = $(BIN_DIR)/test.bin

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../common/googletest/googletest

# Where to find user code.
SRC_DIR = ../Src
INC_DIR = ../Inc

# Where to put user code objects
TESTED_OBJS_DIR = Tested_Objs

# Where to find test code.
TEST_DIR = .

INCLUDE_DIRS = $(INC_DIR) \
			   . \

INCLUDE_FLAGS := $(addprefix -I,$(INCLUDE_DIRS))
INCLUDE_FLAGS += -isystem $(GTEST_DIR)/include

DEFINES := "__UNIT_TEST"
DEFINE_FLAGS := $(addprefix -D,$(DEFINES))

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += $(INCLUDE_FLAGS) $(DEFINE_FLAGS) -std=c99

CFLAGS = $(CPPFLAGS) -g -Wall -Wextra

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TEST_SRC = fake_logic_unittest.c pid_unittest.c rate_control_unittest.c pressure_sensor_unittest.c attitude_unittest.c

# All src files tested
TESTED_SRC_FILES = fake_logic.c pid.c rate_control.c pressureSensor.c fc.c calculateAttitude.c
TESTED_SRC_FILES := $(addprefix $(SRC_DIR)/, $(TESTED_SRC_FILES))

TESTED_OBJS := $(addprefix $(BIN_DIR)/$(TESTED_OBJS_DIR)/, $(addsuffix .o,$(notdir $(basename $(TESTED_SRC_FILES)))))

TEST_OBJS := $(TEST_SRC:%.c=$(BIN_DIR)/%.o)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(BINARY)

run : $(BINARY)
	./$(BINARY)

.PHONY: clean
clean:
	rm -rf $(BIN_DIR)

$(BINARY) : $(TEST_OBJS) $(TESTED_OBJS) $(BIN_DIR)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(BINARY)


# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BIN_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(BIN_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(BIN_DIR)/gtest.a : $(BIN_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(BIN_DIR)/gtest_main.a : $(BIN_DIR)/gtest-all.o $(BIN_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

$(BIN_DIR)/$(TESTED_OBJS_DIR)/%.o : $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

$(BIN_DIR)/%.o: %.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

